{
  "address": "0xc975ab1f8336482310BC15B33881dD0A0261715a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_maxSupply",
          "type": "uint256[]"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maxTokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "quantities",
          "type": "uint256[]"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "prices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newuri",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_prices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_maxSupply",
          "type": "uint256[]"
        }
      ],
      "name": "updateCraftingParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x056dc77c9646d21d3b604e4640b7e25a111440948c0712629b3ddfba65bab7a9",
  "receipt": {
    "to": null,
    "from": "0xC026705b5844Fa0E829ea5F2b4898637C8c7002A",
    "contractAddress": "0xc975ab1f8336482310BC15B33881dD0A0261715a",
    "transactionIndex": 2,
    "gasUsed": "2413063",
    "logsBloom": "0x
    "blockHash": "0x315990d2b6151977b1e69237b53d66d4eb2d7427750e285e921170dcada3ed57",
    "transactionHash": "0x056dc77c9646d21d3b604e4640b7e25a111440948c0712629b3ddfba65bab7a9",
    "logs": [],
    "blockNumber": 10681467,
    "cumulativeGasUsed": "2455063",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "196db3a53bf093ddf3253463c70da719",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxSupply\",\"type\":\"uint256[]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"quantities\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newuri\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_prices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxSupply\",\"type\":\"uint256[]\"}],\"name\":\"updateCraftingParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add(uint256[],uint256[],uint256[])\":{\"details\":\"Adds a new NFT and initializes crafting params\"},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"maxSupply(uint256)\":{\"details\":\"Returns the max supply for a token ID\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"price(uint256)\":{\"details\":\"Returns the total price for a token ID\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setURI(string)\":{\"details\":\"Function to set the URI for all NFT IDs\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"totalSupply(uint256)\":{\"details\":\"Returns the total quantity for a token ID\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mint(uint256,uint256)\":{\"notice\":\"Mints a desired quantity of a single NFT ID\"},\"mintBatch(uint256[],uint256[])\":{\"notice\":\"Batch Mints desired quantities of different NFT IDs\"},\"updateCraftingParameters(uint256[],uint256[],uint256[])\":{\"notice\":\"Maps the rarity classes and Volt costs for use in crafting\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SampleERC1155V1.sol\":\"SampleERC1155V1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa8ff557539dcfed5706eddde2aa929e06bb1764e71aa8c1048a78970bf3ca37d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xc372115b776358b85dd051d502ad755b89f8bd1045691810c0f219ce335bad43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa350df12a8c10e821af05e0863f44e8317a0efa44df27bfd5dc1d63fdfa3c448\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981Upgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981Upgradeable is Initializable, IERC2981Upgradeable, ERC165Upgradeable {\\n    function __ERC2981_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC2981_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC2981Upgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981Upgradeable\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must be already minted.\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\",\"keccak256\":\"0x9b4b41397e9c4b69913416feadc9a78b35742eba74c7342d9b1ef29aba5d3b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/SampleERC1155V1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\n\\ncontract SampleERC1155V1 is\\n    ERC1155Upgradeable,\\n    ERC2981Upgradeable,\\n    OwnableUpgradeable\\n{\\n    // NFT name\\n    string public name;\\n\\n    // NFT symbol\\n    string public symbol;\\n\\n    // Mapping from token ID to token existence\\n    mapping(uint256 => bool) private exists;\\n\\n    // Mapping from token ID to token supply\\n    mapping(uint256 => uint256) private tokenSupply;\\n\\n    // Mapping from token ID to token price\\n    mapping(uint256 => uint256) public prices;\\n\\n    // Mapping from token ID to token quantity\\n    mapping(uint256 => uint256) public maxTokenSupply;\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _uri\\n    ) public initializer {\\n        name = _name;\\n        symbol = _symbol;\\n        __ERC1155_init(_uri);\\n        __Ownable_init();\\n        __ERC2981_init();\\n    }\\n\\n    /**\\n     * @notice Mints a desired quantity of a single NFT ID\\n     */\\n    function mint(uint256 id, uint256 quantity) external payable {\\n        require(quantity >= 1, \\\"You have to mint at least 1 or more at a time\\\");\\n        require(exists[id], \\\"ID does not exist\\\");\\n\\n        require(\\n            tokenSupply[id] + quantity <= maxTokenSupply[id],\\n            \\\"Maximum supply exceeded\\\"\\n        );\\n        require(msg.value >= prices[id] * quantity, \\\"Not enough money\\\");\\n\\n        _mint(msg.sender, id, quantity, \\\"\\\");\\n    }\\n\\n    /**\\n     * @notice Batch Mints desired quantities of different NFT IDs\\n     */\\n    function mintBatch(uint256[] calldata ids, uint256[] calldata quantities)\\n        external\\n        payable\\n    {\\n        require(ids.length == quantities.length, \\\"Mismatched array lengths\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(exists[ids[i]], \\\"ID does not exist\\\");\\n            require(\\n                tokenSupply[ids[i]] + quantities[i] <= maxTokenSupply[ids[i]],\\n                \\\"Maximum supply exceeded\\\"\\n            );\\n            require(\\n                msg.value >= prices[ids[i]] * quantities[i],\\n                \\\"Not enough money\\\"\\n            );\\n        }\\n\\n        _mintBatch(msg.sender, ids, quantities, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Adds a new NFT and initializes crafting params\\n     */\\n    function add(\\n        uint256[] calldata ids,\\n        uint256[] calldata _prices,\\n        uint256[] calldata _maxSupply\\n    ) external onlyOwner {\\n        require(\\n            ids.length == _prices.length && ids.length == _maxSupply.length,\\n            \\\"Mismatched array lengths\\\"\\n        );\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 newId = ids[i];\\n            require(!exists[newId], \\\"ID already exists\\\");\\n            require(newId != 0, \\\"Invalid ID\\\");\\n\\n            exists[newId] = true;\\n            prices[newId] = _prices[i];\\n            maxTokenSupply[newId] = _maxSupply[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to set the URI for all NFT IDs\\n     */\\n    function setURI(string memory newuri) external onlyOwner {\\n        _setURI(newuri);\\n    }\\n\\n    /**\\n     * @notice Maps the rarity classes and Volt costs\\n     * for use in crafting\\n     */\\n    function updateCraftingParameters(\\n        uint256[] calldata ids,\\n        uint256[] calldata _prices,\\n        uint256[] calldata _maxSupply\\n    ) external onlyOwner {\\n        require(\\n            ids.length == _prices.length && ids.length == _maxSupply.length,\\n            \\\"Mismatched array lengths\\\"\\n        );\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            require(exists[ids[i]], \\\"ID does not exist\\\");\\n\\n            prices[ids[i]] = _prices[i];\\n            maxTokenSupply[ids[i]] = _maxSupply[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total quantity for a token ID\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256) {\\n        return tokenSupply[id];\\n    }\\n\\n    /**\\n     * @dev Returns the total price for a token ID\\n     */\\n    function price(uint256 id) external view returns (uint256) {\\n        return prices[id];\\n    }\\n\\n    /**\\n     * @dev Returns the max supply for a token ID\\n     */\\n    function maxSupply(uint256 id) external view returns (uint256) {\\n        return maxTokenSupply[id];\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC1155Upgradeable, ERC2981Upgradeable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Internal override function for minting an NFT\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal override {\\n        super._mint(account, id, amount, data);\\n\\n        tokenSupply[id] += amount;\\n    }\\n\\n    /**\\n     * @dev Internal override function for batch minting NFTs\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal override {\\n        super._mintBatch(to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            tokenSupply[ids[i]] += amounts[i];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc01eb71d7c2728f593f9457a6e067ff704f00ede43bb258e2a0b260e6a22c5ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612ab0806100206000396000f3fe6080604052600436106101655760003560e01c8063715018a6116100d1578063b008a4d01161008a578063d351cfdc11610064578063d351cfdc14610485578063e985e9c514610498578063f242432a146104e1578063f2fde38b1461050157600080fd5b8063b008a4d01461040b578063bc31c1c11461042b578063bd85b0391461045857600080fd5b8063715018a61461034b578063869f7594146103605780638da5cb5b1461038e57806395d89b41146103b6578063a22cb465146103cb578063a6487c53146103eb57600080fd5b80631b908dd9116101235780631b908dd91461024457806326a49e37146102645780632a55205a146102915780632eb2c2d6146102d057806336f5cba5146102f05780634e1273f41461031e57600080fd5b8062fdd58e1461016a57806301ffc9a71461019d57806302fe5305146101cd57806306fdde03146101ef5780630e89341c146102115780631b2ef1ca14610231575b600080fd5b34801561017657600080fd5b5061018a610185366004611e7a565b610521565b6040519081526020015b60405180910390f35b3480156101a957600080fd5b506101bd6101b8366004611eba565b6105ba565b6040519015158152602001610194565b3480156101d957600080fd5b506101ed6101e8366004611f93565b6105cb565b005b3480156101fb57600080fd5b50610204610601565b604051610194919061201c565b34801561021d57600080fd5b5061020461022c36600461202f565b61068f565b6101ed61023f366004612048565b610723565b34801561025057600080fd5b506101ed61025f3660046120ae565b6108a2565b34801561027057600080fd5b5061018a61027f36600461202f565b600090815260ff602052604090205490565b34801561029d57600080fd5b506102b16102ac366004612048565b6109fd565b604080516001600160a01b039093168352602083019190915201610194565b3480156102dc57600080fd5b506101ed6102eb3660046121db565b610aab565b3480156102fc57600080fd5b5061018a61030b36600461202f565b6101006020526000908152604090205481565b34801561032a57600080fd5b5061033e610339366004612284565b610b42565b6040516101949190612389565b34801561035757600080fd5b506101ed610c6b565b34801561036c57600080fd5b5061018a61037b36600461202f565b6000908152610100602052604090205490565b34801561039a57600080fd5b5060c9546040516001600160a01b039091168152602001610194565b3480156103c257600080fd5b50610204610ca1565b3480156103d757600080fd5b506101ed6103e636600461239c565b610cae565b3480156103f757600080fd5b506101ed6104063660046123d8565b610cb9565b34801561041757600080fd5b506101ed6104263660046120ae565b610d6a565b34801561043757600080fd5b5061018a61044636600461202f565b60ff6020526000908152604090205481565b34801561046457600080fd5b5061018a61047336600461202f565b600090815260fe602052604090205490565b6101ed61049336600461245f565b610f03565b3480156104a457600080fd5b506101bd6104b33660046124ca565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b3480156104ed57600080fd5b506101ed6104fc3660046124fd565b611160565b34801561050d57600080fd5b506101ed61051c366004612561565b6111e7565b60006001600160a01b0383166105925760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b60006105c58261127f565b92915050565b60c9546001600160a01b031633146105f55760405162461bcd60e51b81526004016105899061257c565b6105fe816112a4565b50565b60fb805461060e906125b1565b80601f016020809104026020016040519081016040528092919081815260200182805461063a906125b1565b80156106875780601f1061065c57610100808354040283529160200191610687565b820191906000526020600020905b81548152906001019060200180831161066a57829003601f168201915b505050505081565b60606067805461069e906125b1565b80601f01602080910402602001604051908101604052809291908181526020018280546106ca906125b1565b80156107175780601f106106ec57610100808354040283529160200191610717565b820191906000526020600020905b8154815290600101906020018083116106fa57829003601f168201915b50505050509050919050565b600181101561078a5760405162461bcd60e51b815260206004820152602d60248201527f596f75206861766520746f206d696e74206174206c656173742031206f72206d60448201526c6f726520617420612074696d6560981b6064820152608401610589565b600082815260fd602052604090205460ff166107b85760405162461bcd60e51b8152600401610589906125ec565b6000828152610100602090815260408083205460fe909252909120546107df90839061262d565b11156108275760405162461bcd60e51b815260206004820152601760248201527613585e1a5b5d5b481cdd5c1c1b1e48195e18d959591959604a1b6044820152606401610589565b600082815260ff6020526040902054610841908290612645565b3410156108835760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f756768206d6f6e657960801b6044820152606401610589565b61089e338383604051806020016040528060008152506112b7565b5050565b60c9546001600160a01b031633146108cc5760405162461bcd60e51b81526004016105899061257c565b84831480156108da57508481145b6108f65760405162461bcd60e51b815260040161058990612664565b60005b858110156109f45760fd60008888848181106109175761091761269b565b602090810292909201358352508101919091526040016000205460ff166109505760405162461bcd60e51b8152600401610589906125ec565b8484828181106109625761096261269b565b9050602002013560ff600089898581811061097f5761097f61269b565b905060200201358152602001908152602001600020819055508282828181106109aa576109aa61269b565b9050602002013561010060008989858181106109c8576109c861269b565b9050602002013581526020019081526020016000208190555080806109ec906126b1565b9150506108f9565b50505050505050565b60008281526098602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610a725750604080518082019091526097546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610a91906001600160601b031687612645565b610a9b91906126cc565b91519350909150505b9250929050565b6001600160a01b038516331480610ac75750610ac785336104b3565b610b2e5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610589565b610b3b85858585856112ec565b5050505050565b60608151835114610ba75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610589565b600083516001600160401b03811115610bc257610bc2611ede565b604051908082528060200260200182016040528015610beb578160200160208202803683370190505b50905060005b8451811015610c6357610c36858281518110610c0f57610c0f61269b565b6020026020010151858381518110610c2957610c2961269b565b6020026020010151610521565b828281518110610c4857610c4861269b565b6020908102919091010152610c5c816126b1565b9050610bf1565b509392505050565b60c9546001600160a01b03163314610c955760405162461bcd60e51b81526004016105899061257c565b610c9f600061148b565b565b60fc805461060e906125b1565b61089e3383836114dd565b6000610cc560016115be565b90508015610cdd576000805461ff0019166101001790555b8351610cf09060fb906020870190611dca565b508251610d049060fc906020860190611dca565b50610d0e8261164b565b610d1661167b565b610d1e6116aa565b8015610d64576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60c9546001600160a01b03163314610d945760405162461bcd60e51b81526004016105899061257c565b8483148015610da257508481145b610dbe5760405162461bcd60e51b815260040161058990612664565b60005b858110156109f4576000878783818110610ddd57610ddd61269b565b60209081029290920135600081815260fd9093526040909220549192505060ff1615610e3f5760405162461bcd60e51b8152602060048201526011602482015270494420616c72656164792065786973747360781b6044820152606401610589565b80610e795760405162461bcd60e51b815260206004820152600a602482015269125b9d985b1a5908125160b21b6044820152606401610589565b600081815260fd60205260409020805460ff19166001179055858583818110610ea457610ea461269b565b9050602002013560ff600083815260200190815260200160002081905550838383818110610ed457610ed461269b565b600093845261010060209081526040909420930291909101359091555080610efb816126b1565b915050610dc1565b828114610f225760405162461bcd60e51b815260040161058990612664565b60005b838110156110e35760fd6000868684818110610f4357610f4361269b565b602090810292909201358352508101919091526040016000205460ff16610f7c5760405162461bcd60e51b8152600401610589906125ec565b6101006000868684818110610f9357610f9361269b565b90506020020135815260200190815260200160002054838383818110610fbb57610fbb61269b565b9050602002013560fe6000888886818110610fd857610fd861269b565b90506020020135815260200190815260200160002054610ff8919061262d565b11156110405760405162461bcd60e51b815260206004820152601760248201527613585e1a5b5d5b481cdd5c1c1b1e48195e18d959591959604a1b6044820152606401610589565b8282828181106110525761105261269b565b9050602002013560ff600087878581811061106f5761106f61269b565b9050602002013581526020019081526020016000205461108f9190612645565b3410156110d15760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f756768206d6f6e657960801b6044820152606401610589565b806110db816126b1565b915050610f25565b50610d6433858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208089028281018201909352888252909350889250879182918501908490808284376000920182905250604080516020810190915290815292506116d1915050565b6001600160a01b03851633148061117c575061117c85336104b3565b6111da5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610589565b610b3b8585858585611756565b60c9546001600160a01b031633146112115760405162461bcd60e51b81526004016105899061257c565b6001600160a01b0381166112765760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610589565b6105fe8161148b565b60006001600160e01b0319821663152a902d60e11b14806105c557506105c582611884565b805161089e906067906020840190611dca565b6112c3848484846118d4565b600083815260fe6020526040812080548492906112e190849061262d565b909155505050505050565b815183511461130d5760405162461bcd60e51b8152600401610589906126ee565b6001600160a01b0384166113335760405162461bcd60e51b815260040161058990612736565b3360005b845181101561141d5760008582815181106113545761135461269b565b6020026020010151905060008583815181106113725761137261269b565b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156113c35760405162461bcd60e51b81526004016105899061277b565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061140290849061262d565b9250508190555050505080611416906126b1565b9050611337565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161146d9291906127c5565b60405180910390a46114838187878787876119a7565b505050505050565b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156115515760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610589565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60008054610100900460ff1615611605578160ff1660011480156115e15750303b155b6115fd5760405162461bcd60e51b8152600401610589906127f3565b506000919050565b60005460ff80841691161061162c5760405162461bcd60e51b8152600401610589906127f3565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166116725760405162461bcd60e51b815260040161058990612841565b6105fe81611b12565b600054610100900460ff166116a25760405162461bcd60e51b815260040161058990612841565b610c9f611b39565b600054610100900460ff16610c9f5760405162461bcd60e51b815260040161058990612841565b6116dd84848484611b69565b60005b8351811015610b3b578281815181106116fb576116fb61269b565b602002602001015160fe60008684815181106117195761171961269b565b60200260200101518152602001908152602001600020600082825461173e919061262d565b9091555081905061174e816126b1565b9150506116e0565b6001600160a01b03841661177c5760405162461bcd60e51b815260040161058990612736565b33600061178885611cb5565b9050600061179585611cb5565b905060008681526065602090815260408083206001600160a01b038c168452909152902054858110156117da5760405162461bcd60e51b81526004016105899061277b565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061181990849061262d565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611879848a8a8a8a8a611d00565b505050505050505050565b60006001600160e01b03198216636cdb3d1360e11b14806118b557506001600160e01b031982166303a24d0760e21b145b806105c557506301ffc9a760e01b6001600160e01b03198316146105c5565b6001600160a01b0384166118fa5760405162461bcd60e51b81526004016105899061288c565b33600061190685611cb5565b9050600061191385611cb5565b905060008681526065602090815260408083206001600160a01b038b1684529091528120805487929061194790849061262d565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46109f483600089898989611d00565b6001600160a01b0384163b156114835760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906119eb90899089908890889088906004016128cd565b602060405180830381600087803b158015611a0557600080fd5b505af1925050508015611a35575060408051601f3d908101601f19168201909252611a329181019061292b565b60015b611ae257611a41612948565b806308c379a01415611a7b5750611a56612964565b80611a615750611a7d565b8060405162461bcd60e51b8152600401610589919061201c565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610589565b6001600160e01b0319811663bc197c8160e01b146109f45760405162461bcd60e51b8152600401610589906129ed565b600054610100900460ff166105f55760405162461bcd60e51b815260040161058990612841565b600054610100900460ff16611b605760405162461bcd60e51b815260040161058990612841565b610c9f3361148b565b6001600160a01b038416611b8f5760405162461bcd60e51b81526004016105899061288c565b8151835114611bb05760405162461bcd60e51b8152600401610589906126ee565b3360005b8451811015611c4d57838181518110611bcf57611bcf61269b565b602002602001015160656000878481518110611bed57611bed61269b565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611c35919061262d565b90915550819050611c45816126b1565b915050611bb4565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611c9e9291906127c5565b60405180910390a4610b3b816000878787876119a7565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611cef57611cef61269b565b602090810291909101015292915050565b6001600160a01b0384163b156114835760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611d449089908990889088908890600401612a35565b602060405180830381600087803b158015611d5e57600080fd5b505af1925050508015611d8e575060408051601f3d908101601f19168201909252611d8b9181019061292b565b60015b611d9a57611a41612948565b6001600160e01b0319811663f23a6e6160e01b146109f45760405162461bcd60e51b8152600401610589906129ed565b828054611dd6906125b1565b90600052602060002090601f016020900481019282611df85760008555611e3e565b82601f10611e1157805160ff1916838001178555611e3e565b82800160010185558215611e3e579182015b82811115611e3e578251825591602001919060010190611e23565b50611e4a929150611e4e565b5090565b5b80821115611e4a5760008155600101611e4f565b80356001600160a01b038116811461164657600080fd5b60008060408385031215611e8d57600080fd5b611e9683611e63565b946020939093013593505050565b6001600160e01b0319811681146105fe57600080fd5b600060208284031215611ecc57600080fd5b8135611ed781611ea4565b9392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611f1957611f19611ede565b6040525050565b600082601f830112611f3157600080fd5b81356001600160401b03811115611f4a57611f4a611ede565b604051611f61601f8301601f191660200182611ef4565b818152846020838601011115611f7657600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611fa557600080fd5b81356001600160401b03811115611fbb57600080fd5b611fc784828501611f20565b949350505050565b6000815180845260005b81811015611ff557602081850181015186830182015201611fd9565b81811115612007576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611ed76020830184611fcf565b60006020828403121561204157600080fd5b5035919050565b6000806040838503121561205b57600080fd5b50508035926020909101359150565b60008083601f84011261207c57600080fd5b5081356001600160401b0381111561209357600080fd5b6020830191508360208260051b8501011115610aa457600080fd5b600080600080600080606087890312156120c757600080fd5b86356001600160401b03808211156120de57600080fd5b6120ea8a838b0161206a565b9098509650602089013591508082111561210357600080fd5b61210f8a838b0161206a565b9096509450604089013591508082111561212857600080fd5b5061213589828a0161206a565b979a9699509497509295939492505050565b60006001600160401b0382111561216057612160611ede565b5060051b60200190565b600082601f83011261217b57600080fd5b8135602061218882612147565b6040516121958282611ef4565b83815260059390931b85018201928281019150868411156121b557600080fd5b8286015b848110156121d057803583529183019183016121b9565b509695505050505050565b600080600080600060a086880312156121f357600080fd5b6121fc86611e63565b945061220a60208701611e63565b935060408601356001600160401b038082111561222657600080fd5b61223289838a0161216a565b9450606088013591508082111561224857600080fd5b61225489838a0161216a565b9350608088013591508082111561226a57600080fd5b5061227788828901611f20565b9150509295509295909350565b6000806040838503121561229757600080fd5b82356001600160401b03808211156122ae57600080fd5b818501915085601f8301126122c257600080fd5b813560206122cf82612147565b6040516122dc8282611ef4565b83815260059390931b85018201928281019150898411156122fc57600080fd5b948201945b838610156123215761231286611e63565b82529482019490820190612301565b9650508601359250508082111561233757600080fd5b506123448582860161216a565b9150509250929050565b600081518084526020808501945080840160005b8381101561237e57815187529582019590820190600101612362565b509495945050505050565b602081526000611ed7602083018461234e565b600080604083850312156123af57600080fd5b6123b883611e63565b9150602083013580151581146123cd57600080fd5b809150509250929050565b6000806000606084860312156123ed57600080fd5b83356001600160401b038082111561240457600080fd5b61241087838801611f20565b9450602086013591508082111561242657600080fd5b61243287838801611f20565b9350604086013591508082111561244857600080fd5b5061245586828701611f20565b9150509250925092565b6000806000806040858703121561247557600080fd5b84356001600160401b038082111561248c57600080fd5b6124988883890161206a565b909650945060208701359150808211156124b157600080fd5b506124be8782880161206a565b95989497509550505050565b600080604083850312156124dd57600080fd5b6124e683611e63565b91506124f460208401611e63565b90509250929050565b600080600080600060a0868803121561251557600080fd5b61251e86611e63565b945061252c60208701611e63565b9350604086013592506060860135915060808601356001600160401b0381111561255557600080fd5b61227788828901611f20565b60006020828403121561257357600080fd5b611ed782611e63565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c908216806125c557607f821691505b602082108114156125e657634e487b7160e01b600052602260045260246000fd5b50919050565b602080825260119082015270125108191bd95cc81b9bdd08195e1a5cdd607a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561264057612640612617565b500190565b600081600019048311821515161561265f5761265f612617565b500290565b60208082526018908201527f4d69736d617463686564206172726179206c656e677468730000000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156126c5576126c5612617565b5060010190565b6000826126e957634e487b7160e01b600052601260045260246000fd5b500490565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006127d8604083018561234e565b82810360208401526127ea818561234e565b95945050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906128f99083018661234e565b828103606084015261290b818661234e565b9050828103608084015261291f8185611fcf565b98975050505050505050565b60006020828403121561293d57600080fd5b8151611ed781611ea4565b600060033d11156129615760046000803e5060005160e01c5b90565b600060443d10156129725790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156129a157505050505090565b82850191508151818111156129b95750505050505090565b843d87010160208285010111156129d35750505050505090565b6129e260208286010187611ef4565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612a6f90830184611fcf565b97965050505050505056fea2646970667358221220f6596a5f233009cb7a8eaf46e6fcd51e535ed200d89d8ee6a20d16b1bb82c74164736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101655760003560e01c8063715018a6116100d1578063b008a4d01161008a578063d351cfdc11610064578063d351cfdc14610485578063e985e9c514610498578063f242432a146104e1578063f2fde38b1461050157600080fd5b8063b008a4d01461040b578063bc31c1c11461042b578063bd85b0391461045857600080fd5b8063715018a61461034b578063869f7594146103605780638da5cb5b1461038e57806395d89b41146103b6578063a22cb465146103cb578063a6487c53146103eb57600080fd5b80631b908dd9116101235780631b908dd91461024457806326a49e37146102645780632a55205a146102915780632eb2c2d6146102d057806336f5cba5146102f05780634e1273f41461031e57600080fd5b8062fdd58e1461016a57806301ffc9a71461019d57806302fe5305146101cd57806306fdde03146101ef5780630e89341c146102115780631b2ef1ca14610231575b600080fd5b34801561017657600080fd5b5061018a610185366004611e7a565b610521565b6040519081526020015b60405180910390f35b3480156101a957600080fd5b506101bd6101b8366004611eba565b6105ba565b6040519015158152602001610194565b3480156101d957600080fd5b506101ed6101e8366004611f93565b6105cb565b005b3480156101fb57600080fd5b50610204610601565b604051610194919061201c565b34801561021d57600080fd5b5061020461022c36600461202f565b61068f565b6101ed61023f366004612048565b610723565b34801561025057600080fd5b506101ed61025f3660046120ae565b6108a2565b34801561027057600080fd5b5061018a61027f36600461202f565b600090815260ff602052604090205490565b34801561029d57600080fd5b506102b16102ac366004612048565b6109fd565b604080516001600160a01b039093168352602083019190915201610194565b3480156102dc57600080fd5b506101ed6102eb3660046121db565b610aab565b3480156102fc57600080fd5b5061018a61030b36600461202f565b6101006020526000908152604090205481565b34801561032a57600080fd5b5061033e610339366004612284565b610b42565b6040516101949190612389565b34801561035757600080fd5b506101ed610c6b565b34801561036c57600080fd5b5061018a61037b36600461202f565b6000908152610100602052604090205490565b34801561039a57600080fd5b5060c9546040516001600160a01b039091168152602001610194565b3480156103c257600080fd5b50610204610ca1565b3480156103d757600080fd5b506101ed6103e636600461239c565b610cae565b3480156103f757600080fd5b506101ed6104063660046123d8565b610cb9565b34801561041757600080fd5b506101ed6104263660046120ae565b610d6a565b34801561043757600080fd5b5061018a61044636600461202f565b60ff6020526000908152604090205481565b34801561046457600080fd5b5061018a61047336600461202f565b600090815260fe602052604090205490565b6101ed61049336600461245f565b610f03565b3480156104a457600080fd5b506101bd6104b33660046124ca565b6001600160a01b03918216600090815260666020908152604080832093909416825291909152205460ff1690565b3480156104ed57600080fd5b506101ed6104fc3660046124fd565b611160565b34801561050d57600080fd5b506101ed61051c366004612561565b6111e7565b60006001600160a01b0383166105925760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b5060009081526065602090815260408083206001600160a01b03949094168352929052205490565b60006105c58261127f565b92915050565b60c9546001600160a01b031633146105f55760405162461bcd60e51b81526004016105899061257c565b6105fe816112a4565b50565b60fb805461060e906125b1565b80601f016020809104026020016040519081016040528092919081815260200182805461063a906125b1565b80156106875780601f1061065c57610100808354040283529160200191610687565b820191906000526020600020905b81548152906001019060200180831161066a57829003601f168201915b505050505081565b60606067805461069e906125b1565b80601f01602080910402602001604051908101604052809291908181526020018280546106ca906125b1565b80156107175780601f106106ec57610100808354040283529160200191610717565b820191906000526020600020905b8154815290600101906020018083116106fa57829003601f168201915b50505050509050919050565b600181101561078a5760405162461bcd60e51b815260206004820152602d60248201527f596f75206861766520746f206d696e74206174206c656173742031206f72206d60448201526c6f726520617420612074696d6560981b6064820152608401610589565b600082815260fd602052604090205460ff166107b85760405162461bcd60e51b8152600401610589906125ec565b6000828152610100602090815260408083205460fe909252909120546107df90839061262d565b11156108275760405162461bcd60e51b815260206004820152601760248201527613585e1a5b5d5b481cdd5c1c1b1e48195e18d959591959604a1b6044820152606401610589565b600082815260ff6020526040902054610841908290612645565b3410156108835760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f756768206d6f6e657960801b6044820152606401610589565b61089e338383604051806020016040528060008152506112b7565b5050565b60c9546001600160a01b031633146108cc5760405162461bcd60e51b81526004016105899061257c565b84831480156108da57508481145b6108f65760405162461bcd60e51b815260040161058990612664565b60005b858110156109f45760fd60008888848181106109175761091761269b565b602090810292909201358352508101919091526040016000205460ff166109505760405162461bcd60e51b8152600401610589906125ec565b8484828181106109625761096261269b565b9050602002013560ff600089898581811061097f5761097f61269b565b905060200201358152602001908152602001600020819055508282828181106109aa576109aa61269b565b9050602002013561010060008989858181106109c8576109c861269b565b9050602002013581526020019081526020016000208190555080806109ec906126b1565b9150506108f9565b50505050505050565b60008281526098602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610a725750604080518082019091526097546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610a91906001600160601b031687612645565b610a9b91906126cc565b91519350909150505b9250929050565b6001600160a01b038516331480610ac75750610ac785336104b3565b610b2e5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610589565b610b3b85858585856112ec565b5050505050565b60608151835114610ba75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610589565b600083516001600160401b03811115610bc257610bc2611ede565b604051908082528060200260200182016040528015610beb578160200160208202803683370190505b50905060005b8451811015610c6357610c36858281518110610c0f57610c0f61269b565b6020026020010151858381518110610c2957610c2961269b565b6020026020010151610521565b828281518110610c4857610c4861269b565b6020908102919091010152610c5c816126b1565b9050610bf1565b509392505050565b60c9546001600160a01b03163314610c955760405162461bcd60e51b81526004016105899061257c565b610c9f600061148b565b565b60fc805461060e906125b1565b61089e3383836114dd565b6000610cc560016115be565b90508015610cdd576000805461ff0019166101001790555b8351610cf09060fb906020870190611dca565b508251610d049060fc906020860190611dca565b50610d0e8261164b565b610d1661167b565b610d1e6116aa565b8015610d64576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60c9546001600160a01b03163314610d945760405162461bcd60e51b81526004016105899061257c565b8483148015610da257508481145b610dbe5760405162461bcd60e51b815260040161058990612664565b60005b858110156109f4576000878783818110610ddd57610ddd61269b565b60209081029290920135600081815260fd9093526040909220549192505060ff1615610e3f5760405162461bcd60e51b8152602060048201526011602482015270494420616c72656164792065786973747360781b6044820152606401610589565b80610e795760405162461bcd60e51b815260206004820152600a602482015269125b9d985b1a5908125160b21b6044820152606401610589565b600081815260fd60205260409020805460ff19166001179055858583818110610ea457610ea461269b565b9050602002013560ff600083815260200190815260200160002081905550838383818110610ed457610ed461269b565b600093845261010060209081526040909420930291909101359091555080610efb816126b1565b915050610dc1565b828114610f225760405162461bcd60e51b815260040161058990612664565b60005b838110156110e35760fd6000868684818110610f4357610f4361269b565b602090810292909201358352508101919091526040016000205460ff16610f7c5760405162461bcd60e51b8152600401610589906125ec565b6101006000868684818110610f9357610f9361269b565b90506020020135815260200190815260200160002054838383818110610fbb57610fbb61269b565b9050602002013560fe6000888886818110610fd857610fd861269b565b90506020020135815260200190815260200160002054610ff8919061262d565b11156110405760405162461bcd60e51b815260206004820152601760248201527613585e1a5b5d5b481cdd5c1c1b1e48195e18d959591959604a1b6044820152606401610589565b8282828181106110525761105261269b565b9050602002013560ff600087878581811061106f5761106f61269b565b9050602002013581526020019081526020016000205461108f9190612645565b3410156110d15760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f756768206d6f6e657960801b6044820152606401610589565b806110db816126b1565b915050610f25565b50610d6433858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208089028281018201909352888252909350889250879182918501908490808284376000920182905250604080516020810190915290815292506116d1915050565b6001600160a01b03851633148061117c575061117c85336104b3565b6111da5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610589565b610b3b8585858585611756565b60c9546001600160a01b031633146112115760405162461bcd60e51b81526004016105899061257c565b6001600160a01b0381166112765760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610589565b6105fe8161148b565b60006001600160e01b0319821663152a902d60e11b14806105c557506105c582611884565b805161089e906067906020840190611dca565b6112c3848484846118d4565b600083815260fe6020526040812080548492906112e190849061262d565b909155505050505050565b815183511461130d5760405162461bcd60e51b8152600401610589906126ee565b6001600160a01b0384166113335760405162461bcd60e51b815260040161058990612736565b3360005b845181101561141d5760008582815181106113545761135461269b565b6020026020010151905060008583815181106113725761137261269b565b60209081029190910181015160008481526065835260408082206001600160a01b038e1683529093529190912054909150818110156113c35760405162461bcd60e51b81526004016105899061277b565b60008381526065602090815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061140290849061262d565b9250508190555050505080611416906126b1565b9050611337565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161146d9291906127c5565b60405180910390a46114838187878787876119a7565b505050505050565b60c980546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156115515760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610589565b6001600160a01b03838116600081815260666020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60008054610100900460ff1615611605578160ff1660011480156115e15750303b155b6115fd5760405162461bcd60e51b8152600401610589906127f3565b506000919050565b60005460ff80841691161061162c5760405162461bcd60e51b8152600401610589906127f3565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff166116725760405162461bcd60e51b815260040161058990612841565b6105fe81611b12565b600054610100900460ff166116a25760405162461bcd60e51b815260040161058990612841565b610c9f611b39565b600054610100900460ff16610c9f5760405162461bcd60e51b815260040161058990612841565b6116dd84848484611b69565b60005b8351811015610b3b578281815181106116fb576116fb61269b565b602002602001015160fe60008684815181106117195761171961269b565b60200260200101518152602001908152602001600020600082825461173e919061262d565b9091555081905061174e816126b1565b9150506116e0565b6001600160a01b03841661177c5760405162461bcd60e51b815260040161058990612736565b33600061178885611cb5565b9050600061179585611cb5565b905060008681526065602090815260408083206001600160a01b038c168452909152902054858110156117da5760405162461bcd60e51b81526004016105899061277b565b60008781526065602090815260408083206001600160a01b038d8116855292528083208985039055908a1682528120805488929061181990849061262d565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611879848a8a8a8a8a611d00565b505050505050505050565b60006001600160e01b03198216636cdb3d1360e11b14806118b557506001600160e01b031982166303a24d0760e21b145b806105c557506301ffc9a760e01b6001600160e01b03198316146105c5565b6001600160a01b0384166118fa5760405162461bcd60e51b81526004016105899061288c565b33600061190685611cb5565b9050600061191385611cb5565b905060008681526065602090815260408083206001600160a01b038b1684529091528120805487929061194790849061262d565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46109f483600089898989611d00565b6001600160a01b0384163b156114835760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906119eb90899089908890889088906004016128cd565b602060405180830381600087803b158015611a0557600080fd5b505af1925050508015611a35575060408051601f3d908101601f19168201909252611a329181019061292b565b60015b611ae257611a41612948565b806308c379a01415611a7b5750611a56612964565b80611a615750611a7d565b8060405162461bcd60e51b8152600401610589919061201c565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610589565b6001600160e01b0319811663bc197c8160e01b146109f45760405162461bcd60e51b8152600401610589906129ed565b600054610100900460ff166105f55760405162461bcd60e51b815260040161058990612841565b600054610100900460ff16611b605760405162461bcd60e51b815260040161058990612841565b610c9f3361148b565b6001600160a01b038416611b8f5760405162461bcd60e51b81526004016105899061288c565b8151835114611bb05760405162461bcd60e51b8152600401610589906126ee565b3360005b8451811015611c4d57838181518110611bcf57611bcf61269b565b602002602001015160656000878481518110611bed57611bed61269b565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254611c35919061262d565b90915550819050611c45816126b1565b915050611bb4565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611c9e9291906127c5565b60405180910390a4610b3b816000878787876119a7565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611cef57611cef61269b565b602090810291909101015292915050565b6001600160a01b0384163b156114835760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611d449089908990889088908890600401612a35565b602060405180830381600087803b158015611d5e57600080fd5b505af1925050508015611d8e575060408051601f3d908101601f19168201909252611d8b9181019061292b565b60015b611d9a57611a41612948565b6001600160e01b0319811663f23a6e6160e01b146109f45760405162461bcd60e51b8152600401610589906129ed565b828054611dd6906125b1565b90600052602060002090601f016020900481019282611df85760008555611e3e565b82601f10611e1157805160ff1916838001178555611e3e565b82800160010185558215611e3e579182015b82811115611e3e578251825591602001919060010190611e23565b50611e4a929150611e4e565b5090565b5b80821115611e4a5760008155600101611e4f565b80356001600160a01b038116811461164657600080fd5b60008060408385031215611e8d57600080fd5b611e9683611e63565b946020939093013593505050565b6001600160e01b0319811681146105fe57600080fd5b600060208284031215611ecc57600080fd5b8135611ed781611ea4565b9392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611f1957611f19611ede565b6040525050565b600082601f830112611f3157600080fd5b81356001600160401b03811115611f4a57611f4a611ede565b604051611f61601f8301601f191660200182611ef4565b818152846020838601011115611f7657600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215611fa557600080fd5b81356001600160401b03811115611fbb57600080fd5b611fc784828501611f20565b949350505050565b6000815180845260005b81811015611ff557602081850181015186830182015201611fd9565b81811115612007576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611ed76020830184611fcf565b60006020828403121561204157600080fd5b5035919050565b6000806040838503121561205b57600080fd5b50508035926020909101359150565b60008083601f84011261207c57600080fd5b5081356001600160401b0381111561209357600080fd5b6020830191508360208260051b8501011115610aa457600080fd5b600080600080600080606087890312156120c757600080fd5b86356001600160401b03808211156120de57600080fd5b6120ea8a838b0161206a565b9098509650602089013591508082111561210357600080fd5b61210f8a838b0161206a565b9096509450604089013591508082111561212857600080fd5b5061213589828a0161206a565b979a9699509497509295939492505050565b60006001600160401b0382111561216057612160611ede565b5060051b60200190565b600082601f83011261217b57600080fd5b8135602061218882612147565b6040516121958282611ef4565b83815260059390931b85018201928281019150868411156121b557600080fd5b8286015b848110156121d057803583529183019183016121b9565b509695505050505050565b600080600080600060a086880312156121f357600080fd5b6121fc86611e63565b945061220a60208701611e63565b935060408601356001600160401b038082111561222657600080fd5b61223289838a0161216a565b9450606088013591508082111561224857600080fd5b61225489838a0161216a565b9350608088013591508082111561226a57600080fd5b5061227788828901611f20565b9150509295509295909350565b6000806040838503121561229757600080fd5b82356001600160401b03808211156122ae57600080fd5b818501915085601f8301126122c257600080fd5b813560206122cf82612147565b6040516122dc8282611ef4565b83815260059390931b85018201928281019150898411156122fc57600080fd5b948201945b838610156123215761231286611e63565b82529482019490820190612301565b9650508601359250508082111561233757600080fd5b506123448582860161216a565b9150509250929050565b600081518084526020808501945080840160005b8381101561237e57815187529582019590820190600101612362565b509495945050505050565b602081526000611ed7602083018461234e565b600080604083850312156123af57600080fd5b6123b883611e63565b9150602083013580151581146123cd57600080fd5b809150509250929050565b6000806000606084860312156123ed57600080fd5b83356001600160401b038082111561240457600080fd5b61241087838801611f20565b9450602086013591508082111561242657600080fd5b61243287838801611f20565b9350604086013591508082111561244857600080fd5b5061245586828701611f20565b9150509250925092565b6000806000806040858703121561247557600080fd5b84356001600160401b038082111561248c57600080fd5b6124988883890161206a565b909650945060208701359150808211156124b157600080fd5b506124be8782880161206a565b95989497509550505050565b600080604083850312156124dd57600080fd5b6124e683611e63565b91506124f460208401611e63565b90509250929050565b600080600080600060a0868803121561251557600080fd5b61251e86611e63565b945061252c60208701611e63565b9350604086013592506060860135915060808601356001600160401b0381111561255557600080fd5b61227788828901611f20565b60006020828403121561257357600080fd5b611ed782611e63565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c908216806125c557607f821691505b602082108114156125e657634e487b7160e01b600052602260045260246000fd5b50919050565b602080825260119082015270125108191bd95cc81b9bdd08195e1a5cdd607a1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561264057612640612617565b500190565b600081600019048311821515161561265f5761265f612617565b500290565b60208082526018908201527f4d69736d617463686564206172726179206c656e677468730000000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156126c5576126c5612617565b5060010190565b6000826126e957634e487b7160e01b600052601260045260246000fd5b500490565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6040815260006127d8604083018561234e565b82810360208401526127ea818561234e565b95945050505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906128f99083018661234e565b828103606084015261290b818661234e565b9050828103608084015261291f8185611fcf565b98975050505050505050565b60006020828403121561293d57600080fd5b8151611ed781611ea4565b600060033d11156129615760046000803e5060005160e01c5b90565b600060443d10156129725790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156129a157505050505090565b82850191508151818111156129b95750505050505090565b843d87010160208285010111156129d35750505050505090565b6129e260208286010187611ef4565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612a6f90830184611fcf565b97965050505050505056fea2646970667358221220f6596a5f233009cb7a8eaf46e6fcd51e535ed200d89d8ee6a20d16b1bb82c74164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "add(uint256[],uint256[],uint256[])": {
        "details": "Adds a new NFT and initializes crafting params"
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "maxSupply(uint256)": {
        "details": "Returns the max supply for a token ID"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "price(uint256)": {
        "details": "Returns the total price for a token ID"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of exchange. The royalty amount is denominated and should be paid in that same unit of exchange."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setURI(string)": {
        "details": "Function to set the URI for all NFT IDs"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}"
      },
      "totalSupply(uint256)": {
        "details": "Returns the total quantity for a token ID"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mint(uint256,uint256)": {
        "notice": "Mints a desired quantity of a single NFT ID"
      },
      "mintBatch(uint256[],uint256[])": {
        "notice": "Batch Mints desired quantities of different NFT IDs"
      },
      "updateCraftingParameters(uint256[],uint256[],uint256[])": {
        "notice": "Maps the rarity classes and Volt costs for use in crafting"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 149,
        "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 152,
        "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2356,
        "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2400,
        "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 313,
        "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
        "label": "_balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 319,
        "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 321,
        "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
        "label": "_uri",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 1528,
        "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 1886,
        "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
        "label": "_defaultRoyaltyInfo",
        "offset": 0,
        "slot": "151",
        "type": "t_struct(RoyaltyInfo)1883_storage"
      },
      {
        "astId": 1891,
        "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
        "label": "_tokenRoyaltyInfo",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)1883_storage)"
      },
      {
        "astId": 2071,
        "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)48_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
        "label": "_owner",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2426,
        "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
        "label": "name",
        "offset": 0,
        "slot": "251",
        "type": "t_string_storage"
      },
      {
        "astId": 2428,
        "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
        "label": "symbol",
        "offset": 0,
        "slot": "252",
        "type": "t_string_storage"
      },
      {
        "astId": 2432,
        "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
        "label": "exists",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2436,
        "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
        "label": "tokenSupply",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2440,
        "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
        "label": "prices",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2444,
        "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
        "label": "maxTokenSupply",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)48_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[48]",
        "numberOfBytes": "1536"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)1883_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC2981Upgradeable.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)1883_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)1883_storage": {
        "encoding": "inplace",
        "label": "struct ERC2981Upgradeable.RoyaltyInfo",
        "members": [
          {
            "astId": 1880,
            "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1882,
            "contract": "contracts/SampleERC1155V1.sol:SampleERC1155V1",
            "label": "royaltyFraction",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}